<week>
<programming-general>
	<thoughts>	
		TDD - Kent Beck
		Kent Beck - 테스트구동개발의자주있는오해와 리팩터링의중요성
		[테스트 주도 개발의 오해]
		켄트는 Canonical TDD의 프로세스를 먼저 언급하며,
		1. List Scenario
		2-a. write 1 
		2-b. make it pass
		2-c. refactor
		프로세를 바라보는 관점을 제시한다.
		원리적으로는 테스트는 하나만 있어도 그 테스트로부터 수많은 리팩터링이 가능하다.
		리팩터링이라는 프로세스를 제대로 이해하는 사람은 적다.
		리팩터링이라는 것은 너무나 다양한 상황의, 다양한 전략과 패턴이 존재한다.
		중요한 것은 TIDY CODE WORKS를 얻는 것이지,
		canonical TDD의 프로세스를 숭배하며 따르는 것이 아니다.
		만약 Canonical TDD의 프로세스를 잘못 진행한다면 나쁜 코드를 얻을 것이다.
		테스트를 통과한 상태에서, 중요한 결정(설계 등)을 하라.
		테스트는 더 좋은 코드베이스를 만들기 위한 기반, 지표일 뿐이다.
		테스트의 순기능은, 당신이 큰 실수를 하지 못하게 한다는 것이다.
		작은 실수는 할 수도 있다. 테스트는 당신이 자잘한 실수만을 하게 한다.

		----------------------------
		프로그래밍은 좋은 인터페이스를 만드는 것이 전부다.
	</thoughts>
</programming-general>

<music>
	<new>
		Feel/mild days - Hitsujibungaku
	</new>
</music>

<video>
</video>

<personal-development>
	커널과 주변기기(외장기기)가 어떻게 상호작용하는지에 대한 레퍼런스 확인.
	이것은 매우 단순한 방법이며, 여느 io와 다르지 않다.
	주변기기는 각 주변기기마다의 인터페이스가 있고, 레지스터가 있다.
	주변기기가 메모리공간(레지스터)를 따로 갖고 있는 경우도 있고,
	그냥 메인 메모리 공간에 주변기기를 위한 메모리 공간이 있는 경우도 있다.
	이렇게 특정 메모리 주소에 데이터를 쓴 후, 이 데이터를 주변기기가 읽어들이면,
	그 다음부터는 주변기기의 책임이 된다.
</personal-development>

<team-development>
	TopsterRenderer 테스트를 위한 코드베이스 재정렬.
	좋은 인터페이스 테스트를 위해서는
	mit6006에 언급된 함수 정의 원칙을 따라야함.
</team-development>

<language-learning>
	掴む：잡다. 말고 손으로 쥐다. 붙잡다.의 의미로도 쓰인다.
	朗読：낭독.
</language-learning>
</week>
